generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(uuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  sessions       Session[]
  phone          String?
  location       String?
  status         String?
  sfiaLevel      String?
  reportedTo     String?
  reportedToId   String?
  role           String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  additionalInfo AdditionalInfo?
  projects       Project[]
  joiningDate    DateTime?
  userSkills     UserSkill[]
  SkillCategory  SkillCategory[]
  SfiaLevel      SfiaLevel[]
  Certification  Certification[]
  trainingCreatedByIds Training[] @relation("trainingCreatedByIds")
  trainingEmployees    Training[] @relation("trainingEmployees")

 
}

model Skill {
  id            String         @id @default(uuid())
  name          String
  categoryId    String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  skillCategory SkillCategory? @relation(fields: [categoryId], references: [id])
  userSkills    UserSkill[]
}

model SkillCategory {
  id             String          @id @default(uuid())
  name           String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  createdById    String
  status         String?
  createdBy      User            @relation(fields: [createdById], references: [id])
  skills         Skill[]
  certifications Certification[]
}

model UserSkill {
  id          String   @id @default(uuid())
  level       Int
  skillId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  status      String?
  user        User     @relation(fields: [createdById], references: [id])
  skill       Skill    @relation(fields: [skillId], references: [id])
}

model AdditionalInfo {
  id           String   @id @default(uuid())
  discipline   String?
  specialism   String?
  employeeType String?
  location     String?
  costCentre   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @unique
}

model Project {
  id               String   @id @default(uuid())
  projectName      String
  startDate        DateTime
  endDate          DateTime
  role             String
  description      String
  code             String
  isCurrentProject Boolean
  user             User     @relation(fields: [userId], references: [id])
  userId           String
}

model Discipline {
  id     String @id @default(uuid())
  name   String?
  status String?
}

model Location {
  id         String @id @default(uuid())
  name       String?
  costCentre String?
  status     String?
}

model Specialism {
  id         String @id @default(uuid())
  name       String?
  status     String?
  discipline Int?
}

model SfiaLevel {
  id          String   @id @default(uuid())
  level       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  status      String?
  createdBy   User     @relation(fields: [createdById], references: [id])
}

model Certification {
  id           String         @id @default(uuid()) @db.Uuid
  name         String
  url          String
  obtainedDate DateTime
  expiryDate   DateTime
  description  String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  createdById  String
  status       String
  createdBy    User           @relation(fields: [createdById], references: [id])
  categoryId   String?
  categoryName String?
  skillCategory SkillCategory? @relation(fields: [categoryId], references: [id])
}



  model TrainingStatus {
  id        String      @id @default(uuid())
  name      String
  trainings Training[]
}

model Training {
  id               String         @id @default(uuid())
  categoryId       String
  categoryName     String
  skillId          String?
  skillName        String
  fromDate         DateTime
  tentativeEndDate DateTime
  description      String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  createdById      String
  createdBy        User           @relation("trainingCreatedByIds", fields: [createdById], references: [id])
  statusId         String
  status           TrainingStatus @relation(fields: [statusId], references: [id])
  employeeId       String
  employeeName     String
  employee         User           @relation("trainingEmployees", fields: [employeeId], references: [id])
}
 